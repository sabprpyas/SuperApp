apply plugin: 'com.android.application'
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //google
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile 'com.android.support:cardview-v7:23.3.0'
    compile 'com.google.code.gson:gson:2.6.2'
    //三方
    compile 'com.nineoldandroids:library:2.4.0'
    //    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'org.xutils:xutils:3.3.4'
//    compile 'com.sky:apiutils:1.1.1'
    compile project(':apiutils')
}
android {
    compileSdkVersion 23 //编译所需sdk版本
    buildToolsVersion '23.0.2'//编译所需buildtools
    defaultConfig {
        applicationId "com.sky.demo"
        minSdkVersion 17
        targetSdkVersion 23 //个人认为最好 与compileSdkVersion相同
        versionCode 4//内部版本号码，升级时比对。
        versionName "1.4"//展示给用户看的版本信息
        // dex突破65535的限制
        multiDexEnabled true
        // AndroidManifest.xml 里面UMENG_CHANNEL的value为 ${UMENG_CHANNEL_VALUE}
        manifestPlaceholders = [CHANNEL_VALUE: "360"]
        // buildConfigField 'String', 'API_SERVER_URL', '"http://test.flysnow.org/"'
    }
    //httpclient支持
//    useLibrary 'org.apache.http.legacy'

    signingConfigs {
        debug {
            keyAlias 'sky'
            keyPassword '1qaz2wsx'
            storeFile file('Mykey.jks')
            storePassword '1qaz2wsx'
        }
        release {
            keyAlias 'sky'
            keyPassword '1qaz2wsx'
            storeFile file('Mykey.jks')
            storePassword '1qaz2wsx'
        }
    }
    buildTypes {
        release {
            // 自定义不显示Log,
            //buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true //是否开启混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //加载默认混淆配置文件
            signingConfig signingConfigs.release  //签名
            zipAlignEnabled true //Zipalign优化
            shrinkResources true // 移除无用的resource文件，依赖于minifyEnabled
            versionNameSuffix "-sky"//自定义versionname的后缀名
//            applicationIdSuffix 'sky'//自定义applicationId的后缀名
//            debuggable false//默认即为false。
//            jniDebuggable false//默认即为false。
//            renderscriptDebuggable false//渲染脚本调试
//            renderscriptOptimLevel 5//渲染脚本优化水平
            //修改打包好的apk的名称
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (output.outputFile != null && output.outputFile.name.endsWith('.apk')
                            && 'release'.equals(variant.buildType.name)) {
//                        def apkFile = new File(output.outputFile.getParent(), "MyDemo_${variant.flavorName}_v${variant.versionName}_${buildTime()}.apk")
//                        output.outputFile = apkFile
                        output.outputFile = new File(output.outputFile.getParent(),
                                output.outputFile.name.replace(".apk", "-v${variant.versionName}-${buildTime()}.apk"))
                    }
                }
            }
        }
        debug {
            // 自定义Log
//            buildConfigField 'boolean', 'LOG_DEBUG', 'true'
            versionNameSuffix "-sky"
            signingConfig signingConfigs.debug
        }
        jnidebug.initWith(buildTypes.debug)
        jnidebug {
            jniDebuggable true//开启jni
            versionNameSuffix '.jnidebug'
        }
    }
    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }
    //与三星他大爷的冲突
//    dexOptions {
//        incremental true
////        javaMaxHeapSize "2048M"//增加java堆内存大小:
//        preDexLibraries = false//如果与lib包冲突则关闭；
//        jumboMode = true
//    }
//    //java版本配置，以便使用对应版本的一些新特性
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_7
//        targetCompatibility JavaVersion.VERSION_1_7
//    }
    //渠道Flavors，我这里写了一些常用的
    productFlavors {
        sky {}
//        GooglePlay {}
//        xiaomi {}
//        umeng {}
    }
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
//    //修改打包好的apk的名称
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                def fileName = outputFile.name.replace(".apk", "-${defaultConfig.versionName}.apk")
//                def fileName1 = output.outputFile.name.replace(".apk", "-v${variant.versionName}-${buildTime()}.apk")
//                output.outputFile = new File(outputFile.parent, fileName)
//            }
//        }
//    }
}

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}
//运行 gradlew hello (-q只显示有用的信息)
task hello {
    doLast {
        println 'Hello world!'
    }
}
//clearApk,makeApk分别是删除，拷贝，以及将其连接起来的一个设置。
// 其目的是拷贝 build/outputs/apk下面的debug apk文件到项目根目录的 release 文件夹下，并且更名。与featureCompile冲突
task clearApk(type: Delete) {
    delete '../release/' + POM_ARTIFACT_ID + '_' + VERSION_NAME + '.apk'
}
task makeApk(type: Copy) {
    from('build/outputs/apk/'); into('../release/')//从哪到哪
    include('MyDemo-sky-release-v1.1-20150909.apk')//指定移动这个文件
    rename('MyDemo-sky-release-v1.1-20150909.apk', POM_ARTIFACT_ID + '_' + VERSION_NAME + '.apk')
}
makeApk.dependsOn(clearApk, build)
/**
 * gradle命令
 */
//assemble结合Build Variants来创建task
//assemble 这个命令会结合 Build Type 创建自己的task，如:
//./gradlew assembleDebug    ./gradlew assembleRelease
//除此之外 assemble 还能和 Product Flavor 结合创建新的任务，其实 assemble 是和 Build Variants 一起结合使用的，
// 而 Build Variants = Build Type + Product Flavor 。
//如我们想打包wandoujia渠道的release版本，执行如下命令就好了：
//./gradlew assembleWandoujiaRelease
//如果我们只打wandoujia渠道版本，则：
//./gradlew assembleWandoujia
//此命令会生成wandoujia渠道的Release和Debug版本
//同理我想打全部Release版本： ./gradlew assembleRelease
//这条命令会把Product Flavor下的所有渠道的Release版本都打出来。
//总之，assemble 命令创建task有如下用法：
//**assemble**： 允许直接构建一个Variant版本，例如assembleFlavor1Debug。
//**assemble**： 允许构建指定Build Type的所有APK，例如assembleDebug将会构建Flavor1Debug和Flavor2Debug两个Variant版本。
//**assemble**： 允许构建指定flavor的所有APK，例如assembleFlavor1将会构建Flavor1Debug和Flavor1Release两个Variant版本。
/**
 * .so文件的导入
 */
//task copyNativeLibs(type: Copy) {
//    from fileTree(dir: 'libs', include: 'armeabi/*.so') into 'build/lib'
//}
//设置编码
//tasks.withType(Compile) {
//    options.encoding = "UTF-8"
//}
//
//tasks.withType(Compile) {
//    compileTask -> compileTask.dependsOn copyNativeLibs
//}
//clean.dependsOn 'cleanCopyNativeLibs'
//tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
//    pkgTask.jniFolders = [new File(buildDir, 'lib')]
//}
/**
 android {// 当Android默认配置不适用时，比如尤eclipse转化过来的项目文件路径需要配置，as生成的一般不不需要
 sourceSets {main {manifest.srcFile 'AndroidManifest.xml'
 java.srcDirs = ['src']
 resources.srcDirs = ['src']
 aidl.srcDirs = ['src']
 renderscript.srcDirs = ['src']
 res.srcDirs = ['res']
 assets.srcDirs = ['assets']
 jniLibs.srcDirs = ['libs']}//测试所在的路径，这里假设是tests文件夹，没有可以不写这一行
 // Move the tests to tests/java, tests/res, etc...
 instrumentTest.setRoot('tests')

 debug.setRoot('build-types/debug')
 release.setRoot('build-types/release')}productFlavors {feature {}}applicationVariants.all { variant ->
 //为feature 版本加上代码覆盖率http://www.open-open.com/lib/view/open1437144995334.html#_label12
 if ('feature'.equals(variant.flavorName)) {variant.javaCompile.doLast {def coverageFile = file('out/coverage.em')
 if (coverageFile.exists()) {coverageFile.delete()}javaexec {main 'emma'
 args 'instr', '-ip', variant.javaCompile.destinationDir, '-m', 'overwrite', '-out', 'out/coverage.em'
 classpath files(new File(getSdkDirectory(), 'tools/lib/emma.jar'))}}}}}dependencies {featureCompile files(new File(android.getSdkDirectory(), 'tools/lib/emma_device.jar'))//版本覆盖率所需jar} */